#!/usr/bin/python
import socket
import sys
import os
import json
import optparse

LOCO_HOST = 'localhost'
LOCO_PORT = 4206
LOCO_HEADER_DELIMITER = '\n'
LOCO_VERSION = '0.2'

class LocoError(Exception):
    pass

class LocoClient(object):
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.filename = None
        self.request_headers = {}
        self.response_headers = {}
        self.request_file_contents = None
        self.response_file_contents = None
        self.raw_response = None

        self.op = optparse.OptionParser(usage='%prog [options] <filename>', 
                                        version='%prog ' + LOCO_VERSION)
        self.op.add_option('-e',
                           '--editor',
                           dest='editor',
                           help='open EDITOR rather than the default')

        self.op.add_option('-v',
                           '--verbose',
                           dest='verbose',
                           action='store_true',
                           help='verbose output')

    def __del__(self):
        self.socket.close()

    def parse_args(self):
        options, args = self.op.parse_args()
        self.verbose = True if options.verbose else False

        try              : self.filename = args[0]
        except IndexError: raise LocoError('Please specify a file to edit')

        if options.editor:
            self.request_headers['editor'] = options.editor

    def get_file_contents(self):
        if os.access(self.filename, os.F_OK) == True and os.access(self.filename, os.W_OK) == False:
            raise LocoError('File exists but you do not have permission to write to it: {0}'.format(self.filename))

        try:
            with open(self.filename, 'rb') as f:
                self.request_file_contents = f.read(65535)
        except IOError:
            raise LocoError('File does not exist or is not readable: {0}'.format(self.filename))

    def send_request(self):
        if self.verbose: print 'Connecting to server'
        try:
            self.socket.connect((LOCO_HOST, LOCO_PORT))
        except socket.error, e:
            if e.errno == 111: raise LocoError('Connection to server refused')
            else             : raise e

        if self.verbose: print 'Uploading file'
        self.socket.sendall(json.dumps(self.request_headers) +
            LOCO_HEADER_DELIMITER +
            self.request_file_contents)

    def get_and_parse_response(self):
        if self.verbose: print 'Awaiting response from server'
        self.raw_response = self.socket.recv(65536)

        s = self.raw_response.split(LOCO_HEADER_DELIMITER)
        self.response_headers = json.loads(s[0])
        self.response_file_contents = '\n'.join(s[1:])

    def handle_response(self):
        if self.response_headers['success'] == False:
            raise LocoError(self.response_headers['error_text'])

        with open(self.filename, 'wb') as f:
            f.write(self.response_file_contents)
            f.flush()

    def main(self):
        self.parse_args()
        self.get_file_contents()
        self.send_request()
        self.get_and_parse_response()
        self.handle_response()
        if self.verbose: print 'Done!'

if __name__ == '__main__':
    try:
        LocoClient().main()
    except LocoError, e:
        print 'fatal: ' + str(e)